`default_nettype none
//  Copyright 2022 Manuel Moser
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.


//Top module ADC Control
module adc_control(
   input wire clk,
   input wire nrst,
   input wire comparator_in,
   output wire sample_matrix,
   output reg nsample_matrix,
   output wire sample,
   output reg nsample,
   output wire[15:0] result_osr,
   output wire ena,
   output wire conversion_finished_osr,
   input wire[2:0] avg_control,
   input wire iir_enable,
   input wire osr_mode,
   output wire[31:0] pcap_col_n,
   output wire[31:0] pcap_colon_n,
   output wire[15:0] pcap_row_n,
   output wire[2:0]  pcap_bincap_n,
   output wire[31:0] ncap_col_n,
   output wire[31:0] ncap_colon_n,
   output wire[15:0] ncap_row_n,
   output wire[2:0]  ncap_bincap_n
);
 wire next_sample_matrix;
 wire next_sample;
 wire[15:0] next_result_osr;
 wire next_ena;
 wire next_conversion_finished_osr;
 wire[31:0] next_pcap_col_n, next_ncap_col_n;
 wire[31:0] next_pcap_colon_n,next_ncap_colon_n;
 wire[15:0] next_pcap_row_n,next_ncap_row_n;
 wire[2:0]  next_pcap_bincap_n,next_ncap_bincap_n;

// Inverted signals
 assign nsample = ~sample;
 assign nsample_matrix = ~sample_matrix;

// Clock and Reset Handling
always @(posedge clk, negedge nrst) begin
   if (nrst == 0) 
       assign sample_matrix = 0;
       assign sample = 0;
       assign result_osr = 0;
       assign ena,
       assign conversion_finished_osr = 1'b0;
       assign pcap_col_n   = {32{1'b1}};
       assign pcap_colon_n = {32{1'b1}};
       assign pcap_row_n   = {16{1'b1}};
       assign pcap_bincap_n = {3{1'b1}};
       assign ncap_col_n   = {32{1'b1}};
       assign ncap_colon_n = {32{1'b1}};
       assign ncap_row_n   = {16{1'b1}};
       assign ncap_bincap_n = {3{1'b1}};
   else	
       assign sample_matrix = next_sample_matrix;
       assign sample = next_sample;
       assign result_osr = next_result_osr;
       assign ena = next_ena;
       assign conversion_finished_osr = next_conversion_finished_osr;
       assign pcap_col_n    = next_pcap_col_n;
       assign pcap_colon_n  = next_pcap_colon_n;
       assign pcap_row_n    = next_pcap_row_n;
       assign pcap_bincap_n = next_pcap_bincap_n;
       assign ncap_col_n    = next_ncap_col_n;
       assign ncap_colon_n  = next_ncap_colon_n;
       assign ncap_row_n    = next_ncap_row_n;
       assign ncap_bincap_n = next_ncap_bincap_n;
	end
end


endmodule;