
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12+45 (git sha1 cfe940a98, gcc 9.2.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading /foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/runs/foobar2/tmp/synthesis/1-sky130_fd_sc_hd__tt_025C_1v80.no_pg.lib as a blackbox

1. Executing Liberty frontend.
Imported 429 cell types from liberty file.

2. Executing Verilog-2005 frontend: /foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/src/adc_edge_detect_circuit.v
Parsing SystemVerilog input from `/foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/src/adc_edge_detect_circuit.v' to AST representation.
Generating RTLIL representation for module `\adc_edge_detect_circuit'.
Generating RTLIL representation for module `\delaycell'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/runs/foobar2/tmp/synthesis/hierarchy.dot'.
Dumping module adc_edge_detect_circuit to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \adc_edge_detect_circuit
Used module:     \delaycell
Parameter \Ntimes5ns = 80

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\delaycell'.
Parameter \Ntimes5ns = 80
Generating RTLIL representation for module `$paramod\delaycell\Ntimes5ns=s32'00000000000000000000000001010000'.

4.3. Analyzing design hierarchy..
Top module:  \adc_edge_detect_circuit
Used module:     $paramod\delaycell\Ntimes5ns=s32'00000000000000000000000001010000

4.4. Analyzing design hierarchy..
Top module:  \adc_edge_detect_circuit
Used module:     $paramod\delaycell\Ntimes5ns=s32'00000000000000000000000001010000
Removing unused module `\delaycell'.
Removed 1 unused modules.

5. Executing TRIBUF pass.

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \adc_edge_detect_circuit
Used module:     $paramod\delaycell\Ntimes5ns=s32'00000000000000000000000001010000

6.1.2. Analyzing design hierarchy..
Top module:  \adc_edge_detect_circuit
Used module:     $paramod\delaycell\Ntimes5ns=s32'00000000000000000000000001010000
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).

6.2.5. Executing PROC_ARST pass (detect async resets in processes).

6.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

6.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

6.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

6.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\delaycell\Ntimes5ns=s32'00000000000000000000000001010000.
Optimizing module adc_edge_detect_circuit.

6.3. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\delaycell\Ntimes5ns=s32'00000000000000000000000001010000.
<suppressed ~1 debug messages>

6.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

6.6. Executing CHECK pass (checking for obvious problems).
Checking module adc_edge_detect_circuit...
Found and reported 0 problems.

6.7. Executing OPT pass (performing simple optimizations).

6.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adc_edge_detect_circuit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adc_edge_detect_circuit.
Performed a total of 0 changes.

6.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.7.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.7.9. Finished OPT passes. (There is nothing left to do.)

6.8. Executing FSM pass (extract and optimize FSM).

6.8.1. Executing FSM_DETECT pass (finding FSMs in design).

6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.9. Executing OPT pass (performing simple optimizations).

6.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adc_edge_detect_circuit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adc_edge_detect_circuit.
Performed a total of 0 changes.

6.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.9.6. Executing OPT_DFF pass (perform DFF optimizations).

6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.9.9. Finished OPT passes. (There is nothing left to do.)

6.10. Executing WREDUCE pass (reducing word size of cells).

6.11. Executing PEEPOPT pass (run peephole optimizers).

6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adc_edge_detect_circuit:
  created 0 $alu and 0 $macc cells.

6.14. Executing SHARE pass (SAT-based resource sharing).

6.15. Executing OPT pass (performing simple optimizations).

6.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adc_edge_detect_circuit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adc_edge_detect_circuit.
Performed a total of 0 changes.

6.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.15.6. Executing OPT_DFF pass (perform DFF optimizations).

6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.15.9. Finished OPT passes. (There is nothing left to do.)

6.16. Executing MEMORY pass.

6.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

6.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

6.16.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

6.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.16.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.16.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

6.16.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.16.9. Executing MEMORY_COLLECT pass (generating $mem cells).

6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.18. Executing OPT pass (performing simple optimizations).

6.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.18.3. Executing OPT_DFF pass (perform DFF optimizations).

6.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.18.5. Finished fast OPT passes.

6.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.20. Executing OPT pass (performing simple optimizations).

6.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adc_edge_detect_circuit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adc_edge_detect_circuit.
Performed a total of 0 changes.

6.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.20.6. Executing OPT_SHARE pass.

6.20.7. Executing OPT_DFF pass (perform DFF optimizations).

6.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.20.10. Finished OPT passes. (There is nothing left to do.)

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /foss/tools/yosys/cfe940a/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/cfe940a/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~73 debug messages>

6.22. Executing OPT pass (performing simple optimizations).

6.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.22.3. Executing OPT_DFF pass (perform DFF optimizations).

6.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

6.22.5. Finished fast OPT passes.

6.23. Executing ABC pass (technology mapping using ABC).

6.23.1. Extracting gate netlist of module `\adc_edge_detect_circuit' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 1 outputs.

6.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.23.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

6.24. Executing OPT pass (performing simple optimizations).

6.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

6.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

6.24.3. Executing OPT_DFF pass (perform DFF optimizations).

6.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..
Removed 0 unused cells and 7 unused wires.
<suppressed ~2 debug messages>

6.24.5. Finished fast OPT passes.

6.25. Executing HIERARCHY pass (managing design hierarchy).

6.25.1. Analyzing design hierarchy..
Top module:  \adc_edge_detect_circuit

6.25.2. Analyzing design hierarchy..
Top module:  \adc_edge_detect_circuit
Removed 0 unused modules.

6.26. Printing statistics.

=== adc_edge_detect_circuit ===

   Number of wires:                  9
   Number of wire bits:            167
   Number of public wires:           8
   Number of public wire bits:     166
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                       1
     $_OR_                           1
     sky130_mm_sc_hd_dly5ns         80

6.27. Executing CHECK pass (checking for obvious problems).
Checking module adc_edge_detect_circuit...
Found and reported 0 problems.

7. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/runs/foobar2/tmp/synthesis/post_techmap.dot'.
Dumping module adc_edge_detect_circuit to page 1.

8. Executing SHARE pass (SAT-based resource sharing).

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adc_edge_detect_circuit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adc_edge_detect_circuit.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adc_edge_detect_circuit'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adc_edge_detect_circuit.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

11. Printing statistics.

=== adc_edge_detect_circuit ===

   Number of wires:                  6
   Number of wire bits:             85
   Number of public wires:           5
   Number of public wire bits:      84
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                       1
     $_OR_                           1
     sky130_mm_sc_hd_dly5ns         80

mapping tbuf

12. Executing TECHMAP pass (map to technology primitives).

12.1. Executing Verilog-2005 frontend: /foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

12.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

13. Executing SIMPLEMAP pass (map simple cells to gate primitives).

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

16.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\adc_edge_detect_circuit':

17. Printing statistics.

=== adc_edge_detect_circuit ===

   Number of wires:                  6
   Number of wire bits:             85
   Number of public wires:           5
   Number of public wire bits:      84
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                       1
     $_OR_                           1
     sky130_mm_sc_hd_dly5ns         80

[INFO]: USING STRATEGY AREA 0

18. Executing ABC pass (technology mapping using ABC).

18.1. Extracting gate netlist of module `\adc_edge_detect_circuit' to `/tmp/yosys-abc-lnsi9a/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

18.1.1. Executing ABC.
Running ABC command: /foss/tools/yosys/cfe940a/bin/yosys-abc -s -f /tmp/yosys-abc-lnsi9a/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-lnsi9a/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-lnsi9a/input.blif 
ABC: + read_lib -w /foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/runs/foobar2/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/runs/foobar2/tmp/synthesis/trimmed.lib" has 176 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =    7.78 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/runs/foobar2/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /foss/designs/SKY130_SAR-ADC/openlane/adc_edge_detect_circuit/runs/foobar2/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 5 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (405.05 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =      2 ( 50.0 %)   Cap =  9.0 ff (  6.2 %)   Area =       12.51 ( 50.0 %)   Delay =   307.52 ps  (100.0 %)               
ABC: Path  0 --       2 : 0    1 pi                      A =   0.00  Df =  16.7   -9.8 ps  S =  28.7 ps  Cin =  0.0 ff  Cout =   4.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --       5 : 1    1 sky130_fd_sc_hd__inv_2  A =   3.75  Df =  37.4   -5.1 ps  S =  18.8 ps  Cin =  4.5 ff  Cout =   2.4 ff  Cmax = 331.4 ff  G =   51  
ABC: Path  2 --       6 : 3    1 sky130_fd_sc_hd__a21o_2 A =   8.76  Df = 307.5  -63.1 ps  S = 173.5 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 309.5 ff  G = 1422  
ABC: Start-point = pi1 (\delay_400ns.out).  End-point = po0 (\ena_out).
ABC: + print_stats -m 
ABC: netlist                       : i/o =    3/    1  lat =    0  nd =     2  edge =      4  area =12.51  delay = 2.00  lev = 2
ABC: + write_blif /tmp/yosys-abc-lnsi9a/output.blif 

18.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

19. Executing SETUNDEF pass (replace undef values with defined constants).

20. Executing HILOMAP pass (mapping to constant drivers).

21. Executing SPLITNETS pass (splitting up multi-bit signals).

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adc_edge_detect_circuit..
Removed 0 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

23. Executing INSBUF pass (insert buffer cells for connected wires).

24. Executing CHECK pass (checking for obvious problems).
Checking module adc_edge_detect_circuit...
Found and reported 0 problems.

25. Printing statistics.

=== adc_edge_detect_circuit ===

   Number of wires:                 84
   Number of wire bits:             84
   Number of public wires:          83
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     sky130_fd_sc_hd__a21o_2         1
     sky130_fd_sc_hd__inv_2          1
     sky130_mm_sc_hd_dly5ns         80

   Chip area for module '\adc_edge_detect_circuit': 2014.432000

26. Executing Verilog backend.
Dumping module `\adc_edge_detect_circuit'.

End of script. Logfile hash: daa67eea66, CPU: user 1.44s system 0.05s, MEM: 40.90 MB peak
Yosys 0.12+45 (git sha1 cfe940a98, gcc 9.2.1 -fPIC -Os)
Time spent: 26% 2x read_liberty (0 sec), 18% 2x abc (0 sec), ...
